import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.environ.get("BOT_TOKEN", "your_telegram_bot_token")
CHANNEL_USERNAME = os.environ.get("CHANNEL_USERNAME", "@your_channel")

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ==========
class GameState:
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (0-10)
        self.career = 0
        self.family = 0 
        self.energy = 8
        self.skills = 0
        
        # –í—Ä–µ–º—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.hours = 15
        self.minutes = 0
        self.day = 1
        self.total_score = 0
        self.days_completed = 0
        self.day_type = "normal"
        
        # –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
        self.achievements = []
        self.special_events_seen = []
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        self.checked_subscription = False
        self.current_scene = "start"
        self.player_name = "–ì–µ—Ä–æ–π"
        self.pending_scene = None

# ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï ==========
user_states = {}

# ========== –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ò ==========
def add_time(state, hours=0, minutes=0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    total_minutes = state.hours * 60 + state.minutes + hours * 60 + minutes
    state.hours = total_minutes // 60
    state.minutes = total_minutes % 60
    return state

def time_to_str(state):
    return f"{state.hours:02d}:{state.minutes:02d}"

def is_late(state):
    return state.hours > 18 or (state.hours == 18 and state.minutes > 40)

# ========== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ==========
async def check_subscription(user_id, context: ContextTypes.DEFAULT_TYPE):
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def remove_buttons_and_show_choice(query, choice_text):
    try:
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"üë§ {choice_text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

async def restart_game(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    user_states[user_id] = GameState()
    await start(update, context)

def calculate_total_score(state):
    base_score = (state.career + state.family + state.energy + state.skills) * 10
    day_bonus = state.days_completed * 50
    achievement_bonus = len(state.achievements) * 30
    
    total = base_score + day_bonus + achievement_bonus
    
    # –ë–æ–Ω—É—Å—ã –∑–∞ –≤—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if state.career >= 8: total += 50
    if state.family >= 8: total += 50  
    if state.energy >= 8: total += 50
    if state.skills >= 8: total += 50
        
    return total

def generate_day_type(state):
    day_types = ["normal", "career_crisis", "family_crisis", "lucky_day", "energy_drain", "skill_focus"]
    
    if state.days_completed >= 3 and random.random() < 0.6:
        return random.choice(["career_crisis", "family_crisis", "energy_drain"])
    
    return random.choice(day_types)

def get_day_modifiers(day_type):
    modifiers = {
        "normal": {"time_mod": 1.0, "energy_mod": 1.0},
        "career_crisis": {"time_mod": 1.2, "energy_mod": 0.8, "career_bonus": 1},
        "family_crisis": {"time_mod": 1.3, "energy_mod": 0.7, "family_bonus": 1},
        "lucky_day": {"time_mod": 0.8, "energy_mod": 1.2},
        "energy_drain": {"time_mod": 1.1, "energy_mod": 0.6},
        "skill_focus": {"time_mod": 1.0, "energy_mod": 1.1, "skill_bonus": 1}
    }
    return modifiers.get(day_type, modifiers["normal"])

async def share_results_button(query, state):
    share_text = f"–Ø¬∑–∏–≥—Ä–∞—é¬∑–≤¬∑–ì–æ–Ω–∫—É¬∑–¥–æ¬∑–£–Ω–∏–≤–µ—Ä–∞!¬∑–î–µ–Ω—å:{state.day}|–°—á–µ—Ç:{state.total_score}|–≠–Ω–µ—Ä–≥–∏—è:{state.energy}|–ö–∞—Ä—å–µ—Ä–∞:{state.career}|–°–µ–º—å—è:{state.family}|–ù–∞–≤—ã–∫–∏:{state.skills}|–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:{len(state.achievements)}|–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
    
    share_url = f"https://t.me/share/url?url=https://t.me/SurvivalStudentGameBot&text={share_text}"
    
    keyboard = [
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", url=share_url)],
        [InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="next_day")],
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ========== –°–õ–£–ß–ê–ô–ù–´–ï –°–û–ë–´–¢–ò–Ø ==========
async def trigger_random_event(query, state, force_chance=None):
    chance = force_chance if force_chance is not None else 0.4
    
    if state.day_type == "lucky_day":
        chance = 0.7
    
    if random.random() > chance:
        return state, False
    
    events = [
        {
            "id": "bonus_award",
            "text": "üéÅ –°–†–û–ß–ù–ê–Ø –ü–†–ï–ú–ò–Ø!\n\n–¢–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–∏–ª —Å—Ä–æ—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ! –ù–∞—á–∞–ª—å–Ω–∏–∫ –¥–∞—ë—Ç –æ—Ç–≥—É–ª!",
            "effects": {"minutes": -90, "career": 2, "energy": 1},
            "achievement": "–ó–æ–ª–æ—Ç–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        },
        {
            "id": "friend_help", 
            "text": "ü§ù –ü–û–ú–û–©–¨ –ù–ê –î–û–†–û–ì–ï!\n\n–î—Ä—É–≥ –≤—Å—Ç—Ä–µ—Ç–∏–ª –ø–æ –ø—É—Ç–∏ –∏ –ø–æ–¥–≤—ë–∑ –¥–æ —É–Ω–∏–≤–µ—Ä–∞!",
            "effects": {"minutes": -40, "family": 1},
            "achievement": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥"
        },
        {
            "id": "traffic_jam",
            "text": "üöó –ü–†–û–ë–ö–ê –ù–ê –î–û–†–û–ì–ï!\n\n–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–∫–∞ –∑–∞–¥–µ—Ä–∂–∞–ª–∞ –Ω–∞ –ø–æ–ª—á–∞—Å–∞!",
            "effects": {"minutes": 30, "energy": -1},
            "achievement": None
        },
        {
            "id": "kids_amazing",
            "text": "üèÜ –î–ï–¢–ò –ü–û–ú–û–ì–ê–Æ–¢!\n\n–î–µ—Ç–∏ —Å–∞–º–∏ —Å–¥–µ–ª–∞–ª–∏ —É—Ä–æ–∫–∏ –∏ –æ—Å–≤–æ–±–æ–¥–∏–ª–∏ –≤—Ä–µ–º—è!",
            "effects": {"minutes": -45, "family": 2, "energy": 1},
            "achievement": "–°—É–ø–µ—Ä—Ä–æ–¥–∏—Ç–µ–ª—å"
        }
    ]
    
    available_events = [e for e in events if e["id"] not in state.special_events_seen]
    if not available_events:
        available_events = events
    
    event = random.choice(available_events)
    state.special_events_seen.append(event["id"])
    
    old_time = f"{state.hours:02d}:{state.minutes:02d}"
    
    # –ü–†–ò–ú–ï–ù–Ø–ï–ú –≠–§–§–ï–ö–¢–´
    if "minutes" in event["effects"]:
        state = add_time(state, minutes=event["effects"]["minutes"])
    if "career" in event["effects"]:
        state.career = min(10, max(0, state.career + event["effects"]["career"]))
    if "family" in event["effects"]:
        state.family = min(10, max(0, state.family + event["effects"]["family"]))
    if "energy" in event["effects"]:
        state.energy = min(10, max(0, state.energy + event["effects"]["energy"]))
    if "skills" in event["effects"]:
        state.skills = min(10, max(0, state.skills + event["effects"]["skills"]))
    
    new_time = f"{state.hours:02d}:{state.minutes:02d}"
    
    text = f"üé≤ –°–õ–£–ß–ê–ô–ù–û–ï –°–û–ë–´–¢–ò–ï!\n\n{event['text']}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    effects_text = ""
    if "minutes" in event["effects"]:
        effects_text += f"‚è∞ –í—Ä–µ–º—è: {old_time} ‚Üí {new_time}\n"
    if "career" in event["effects"] and event["effects"]["career"] != 0:
        effects_text += f"üíº –ö–∞—Ä—å–µ—Ä–∞ {event['effects']['career']:+d}\n"
    if "family" in event["effects"] and event["effects"]["family"] != 0:
        effects_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è {event['effects']['family']:+d}\n"
    if "energy" in event["effects"] and event["effects"]["energy"] != 0:
        effects_text += f"‚ö° –≠–Ω–µ—Ä–≥–∏—è {event['effects']['energy']:+d}\n"
    
    if effects_text:
        text += f"\n–≠—Ñ—Ñ–µ–∫—Ç—ã:\n{effects_text}"
    
    if event["achievement"] and event["achievement"] not in state.achievements:
        state.achievements.append(event["achievement"])
        text += f"\nüèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {event['achievement']}"
    
    keyboard = [[InlineKeyboardButton("‚ú® –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_after_event")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(text, reply_markup=reply_markup)
    return state, True

# ========== –û–°–ù–û–í–ù–´–ï –°–¶–ï–ù–´ –ò–ì–†–´ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_id = update.message.from_user.id
        message = update.message
    else:
        query = update.callback_query
        user_id = query.from_user.id
        message = query.message
    
    user_states[user_id] = GameState()
    state = user_states[user_id]
    
    first_name = update.effective_user.first_name or "–ì–µ—Ä–æ–π"
    state.player_name = first_name
    
    welcome_text = (
        f"üéÆ –ì–û–ù–ö–ê –î–û –£–ù–ò–í–ï–†–ê: –ò–°–ö–£–°–°–¢–í–û –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n\n"
        "–¢—ã ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π: —Å—Ç—É–¥–µ–Ω—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–Ω–∏–∫, –ø–∞—Ä—Ç–Ω–µ—Ä –∏ —Ä–æ–¥–∏—Ç–µ–ª—å —Ç—Ä–æ–∏—Ö –¥–µ—Ç–µ–π!\n\n"
        "–¢–í–û–Ø –ú–ò–°–°–ò–Ø:\n"
        "üïí –£—Å–ø–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –∫ 18:40\n"  
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–º—å—é —Å—á–∞—Å—Ç–ª–∏–≤–æ–π\n"
        "üíº –ù–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚ö° –ù–µ –≤—ã–≥–æ—Ä–µ—Ç—å –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏\n\n"
        "–û–°–û–ë–ï–ù–ù–û–°–¢–ò:\n"
        "üëâ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∫—Ä–∏–∑–∏—Å—ã\n"
        "üëâ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤\n"
        "üëâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "üëâ –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è\n\n"
        f"üì¢ –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞:\n{CHANNEL_USERNAME}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(welcome_text, reply_markup=reply_markup)

async def start_day_message(query, state):
    state.day_type = generate_day_type(state)
    
    day_descriptions = {
        "normal": "üìÖ –û–ë–´–ß–ù–´–ô –î–ï–ù–¨\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ –∑–∞–¥–∞—á–∏",
        "career_crisis": "üí• –ö–†–ò–ó–ò–° –ù–ê –†–ê–ë–û–¢–ï\n–ó–∞–¥–∞—á–∏ —Å–ª–æ–∂–Ω–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –æ–ø—ã—Ç–∞",  
        "family_crisis": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–ï–ú–ï–ô–ù–´–ô –ö–†–ò–ó–ò–°\n–°–µ–º—å—è —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∑–∞–±–æ—Ç—ã",
        "lucky_day": "üçÄ –£–î–ê–ß–ù–´–ô –î–ï–ù–¨\n–í—ã—à–µ —à–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –±–æ–Ω—É—Å–æ–≤",
        "energy_drain": "üò´ –î–ï–ù–¨ –£–°–¢–ê–õ–û–°–¢–ò\n–≠–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, –Ω—É–∂–Ω–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å",
        "skill_focus": "üîß –î–ï–ù–¨ –ù–ê–í–´–ö–û–í\n–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —É–º–µ–Ω–∏—è"
    }
    
    day_text = (
        f"üéÆ –ì–û–ù–ö–ê –î–û –£–ù–ò–í–ï–†–ê: –î–µ–Ω—å {state.day} üéÆ\n\n"
        f"üåü {day_descriptions[state.day_type]}\n\n"
        f"üïí –°–µ–π—á–∞—Å {time_to_str(state)}\n"
        f"üìö –ü–∞—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ 18:40\n\n"
        f"‚ö° –¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        f"–≠–Ω–µ—Ä–≥–∏—è: {state.energy}/10\n"
        f"–ö–∞—Ä—å–µ—Ä–∞: {state.career}/10\n"
        f"–°–µ–º—å—è: {state.family}/10\n"
        f"–ù–∞–≤—ã–∫–∏: {state.skills}/10\n\n"
        "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º?"
    )
    
    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –¥–µ–Ω—å!", callback_data="start_day")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(day_text, reply_markup=reply_markup)

# ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK ==========
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_state = user_states.get(user_id)
    
    if not current_state:
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return

    # ========== –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
    if query.data == "restart":
        await remove_buttons_and_show_choice(query, "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ")
        await restart_game(update, context, user_id)
        return

    elif query.data == "check_subscription":
        if await check_subscription(user_id, context):
            current_state.checked_subscription = True
            await remove_buttons_and_show_choice(query, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ ‚úÖ")
            await start_day_message(query, current_state)
        else:
            text = (
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
                f"{CHANNEL_USERNAME}"
            )
            keyboard = [
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        return

    elif query.data == "start_day":
        await remove_buttons_and_show_choice(query, "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å! üöÄ")
        await scene_work_start(query, current_state)
        return

    elif query.data == "continue_after_event":
        if current_state.pending_scene == "work_decision":
            await scene_work_decision(query, current_state)
        elif current_state.pending_scene == "family":
            await scene_family_crisis(query, current_state)
        elif current_state.pending_scene == "partner":
            await scene_partner_dilemma(query, current_state)
        elif current_state.pending_scene == "transport":
            await scene_transport(query, current_state)
        elif current_state.pending_scene == "final":
            await final_scene(query, current_state)
        else:
            await scene_work_start(query, current_state)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if not current_state.checked_subscription:
        text = "‚õî –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª"
        keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        return

    # ========== –û–°–ù–û–í–ù–ê–Ø –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ==========
    
    # –†–ê–ë–û–¢–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ë–ê–õ–õ–´ –ò –í–†–ï–ú–Ø
    if query.data == "work_quality":
        await remove_buttons_and_show_choice(query, "–°–¥–µ–ª–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç üìä")
        modifiers = get_day_modifiers(current_state.day_type)
        time_cost = 120  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        current_state = add_time(current_state, minutes=time_cost)
        career_bonus = 3
        current_state.career = min(10, current_state.career + career_bonus)
        energy_cost = 2
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.skills += 1
        current_state.pending_scene = "work_decision"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_work_decision(query, current_state)
    
    elif query.data == "work_fast":
        await remove_buttons_and_show_choice(query, "–°–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç ‚ö°")
        time_cost = 60
        current_state = add_time(current_state, minutes=time_cost)
        career_bonus = 1
        current_state.career = min(10, current_state.career + career_bonus)
        energy_cost = 1
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.pending_scene = "work_decision"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_work_decision(query, current_state)
    
    elif query.data == "work_skip":
        await remove_buttons_and_show_choice(query, "–ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ª–ª–µ–≥–µ üö∂")
        time_cost = 30
        current_state = add_time(current_state, minutes=time_cost)
        current_state.career = max(0, current_state.career - 1)
        energy_cost = 1
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.pending_scene = "family"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_family_crisis(query, current_state)
    
    # –°–ï–ú–¨–Ø - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ë–ê–õ–õ–´ –ò –í–†–ï–ú–Ø
    elif query.data == "family_help":
        await remove_buttons_and_show_choice(query, "–ü–æ–º–æ—á—å –≤—Å–µ–º –¥–µ—Ç—è–º üë®‚Äçüë©‚Äçüëß‚Äçüë¶")
        time_cost = 90
        current_state = add_time(current_state, minutes=time_cost)
        family_bonus = 3
        current_state.family = min(10, current_state.family + family_bonus)
        energy_cost = 2
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.skills += 1
        current_state.pending_scene = "partner"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_partner_dilemma(query, current_state)
    
    elif query.data == "family_quick":
        await remove_buttons_and_show_choice(query, "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å ‚è±Ô∏è")
        time_cost = 45
        current_state = add_time(current_state, minutes=time_cost)
        family_bonus = 1
        current_state.family = min(10, current_state.family + family_bonus)
        energy_cost = 1
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.pending_scene = "partner"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_partner_dilemma(query, current_state)
    
    elif query.data == "family_money":
        await remove_buttons_and_show_choice(query, "–ù–∞–Ω—è—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ üí∞")
        time_cost = 20
        current_state = add_time(current_state, minutes=time_cost)
        family_bonus = 2
        current_state.family = min(10, current_state.family + family_bonus)
        current_state.pending_scene = "partner"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_partner_dilemma(query, current_state)
    
    # –ü–ê–†–¢–ù–ï–† - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ë–ê–õ–õ–´ –ò –í–†–ï–ú–Ø
    elif query.data == "partner_help":
        await remove_buttons_and_show_choice(query, "–ü–æ–º–æ—á—å —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ üéÅ")
        time_cost = 90
        current_state = add_time(current_state, minutes=time_cost)
        family_bonus = 2
        current_state.family = min(10, current_state.family + family_bonus)
        energy_cost = 1
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.skills += 1
        current_state.pending_scene = "transport"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_transport(query, current_state)
    
    elif query.data == "partner_apologize":
        await remove_buttons_and_show_choice(query, "–ò–∑–≤–∏–Ω–∏—Ç—å—Å—è –∏ –ø–æ–æ–±–µ—â–∞—Ç—å üíê")
        time_cost = 30
        current_state = add_time(current_state, minutes=time_cost)
        family_bonus = 1
        current_state.family = min(10, current_state.family + family_bonus)
        current_state.pending_scene = "transport"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_transport(query, current_state)
    
    elif query.data == "partner_ignore":
        await remove_buttons_and_show_choice(query, "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚ùå")
        time_cost = 10
        current_state = add_time(current_state, minutes=time_cost)
        current_state.family = max(0, current_state.family - 2)
        energy_cost = 1
        current_state.energy = max(0, current_state.energy - energy_cost)
        current_state.pending_scene = "transport"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await scene_transport(query, current_state)
    
    # –¢–†–ê–ù–°–ü–û–†–¢ - –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –í–†–ï–ú–Ø
    elif query.data == "transport_fix":
        await remove_buttons_and_show_choice(query, "–ü–æ—á–∏–Ω–∏—Ç—å –º–∞—à–∏–Ω—É üîß")
        time_cost = 60
        current_state = add_time(current_state, minutes=time_cost)
        current_state.skills += 2
        current_state.pending_scene = "final"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await final_scene(query, current_state)
    
    elif query.data == "transport_taxi":
        await remove_buttons_and_show_choice(query, "–í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üöï")
        time_cost = 25
        current_state = add_time(current_state, minutes=time_cost)
        current_state.skills += 1
        current_state.pending_scene = "final"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await final_scene(query, current_state)
    
    elif query.data == "transport_bus":
        await remove_buttons_and_show_choice(query, "–ï—Ö–∞—Ç—å –Ω–∞ –∞–≤—Ç–æ–±—É—Å–µ üöå")
        time_cost = 50
        current_state = add_time(current_state, minutes=time_cost)
        current_state.pending_scene = "final"
        current_state, event_happened = await trigger_random_event(query, current_state, force_chance=0.3)
        if not event_happened:
            await final_scene(query, current_state)
    
    # –°–õ–£–®–ê–ï–ú –ü–†–û–ë–õ–ï–ú–£ –°–ï–ú–¨–ò
    elif query.data == "listen_family":
        await remove_buttons_and_show_choice(query, "–í—ã—Å–ª—É—à–∞–ª –ø—Ä–æ–±–ª–µ–º—É —Å–µ–º—å–∏ üëÇ")
        await scene_family_crisis(query, current_state)
        return
    
    # –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´
    elif query.data == "show_stats":
        await show_statistics(query, current_state)
    elif query.data == "show_achievements":
        await show_achievements(query, current_state)
    elif query.data == "next_day":
        await start_new_day(query, current_state)
    elif query.data == "share_progress":
        reply_markup = await share_results_button(query, current_state)
        await query.message.reply_text(
            "üéÆ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —É—Å–ø–µ—Ö–æ–º!\n\n–ü—É—Å—Ç—å –¥—Ä—É–∑—å—è —É–∑–Ω–∞—é—Ç, –∫–∞–∫ —Ç—ã –∫—Ä—É—Ç–æ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—à—å –∂–∏–∑–Ω—å!", 
            reply_markup=reply_markup
        )

# ========== –ò–ì–†–û–í–´–ï –°–¶–ï–ù–´ ==========
async def scene_work_start(query, state):
    state.current_scene = "work"
    
    work_messages = [
        f"üíº –†–ê–ë–û–¢–ê\n\n{state.player_name}, –Ω–∞—á–∞–ª—å–Ω–∏–∫ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É:\n¬´–ù—É–∂–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫–≤–∞—Ä—Ç–∞–ª—É. –ë–µ–∑ —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ!¬ª",
        f"üíº –†–ê–ë–û–¢–ê\n\n{state.player_name}, —Å—Ä–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n¬´–ö–ª–∏–µ–Ω—Ç –∂–¥—ë—Ç –æ—Ç—á—ë—Ç –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è. –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –Ω–∞—à –∫—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç.¬ª"
    ]
    
    text = (
        f"üïí –î–µ–Ω—å {state.day} | {time_to_str(state)}\n\n"
        f"{random.choice(work_messages)}\n\n"
        "–¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìä –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç (2 —á–∞—Å–∞)", callback_data="work_quality")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç (1 —á–∞—Å)", callback_data="work_fast")],
        [InlineKeyboardButton("üö∂ –ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ª–ª–µ–≥–µ (30 –º–∏–Ω—É—Ç)", callback_data="work_skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def scene_work_decision(query, state):
    text = (
        f"üïí {time_to_str(state)}\n\n"
        "üìà –ò–¢–û–ì–ò –†–ê–ë–û–¢–´\n\n"
        "–û—Ç—á—ë—Ç —Å–¥–∞–Ω! –í—Ä–µ–º—è –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.\n\n"
        "–ó–≤–æ–Ω–∏—Ç –ø–∞—Ä—Ç–Ω—ë—Ä, –≥–æ–ª–æ—Å –¥—Ä–æ–∂–∏—Ç:\n¬´–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –¥–æ–º–∞! –°—Ä–æ—á–Ω–æ!¬ª\n\n–°–ª—É—à–∞–µ—à—å?"
    )
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É", callback_data="listen_family")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def scene_family_crisis(query, state):
    state.current_scene = "family"
    
    family_situations = [
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–ï–ú–ï–ô–ù–´–ô –ö–†–ò–ó–ò–°\n\n{state.player_name}, –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –ø–∞–Ω–∏–∫–µ:\n¬´–°—Ç–∞—Ä—à–∏–π –Ω–µ —Å–¥–∞–ª –ø—Ä–æ–µ–∫—Ç, —Å—Ä–µ–¥–Ω–∏–π –∑–∞–±–æ–ª–µ–ª, –º–ª–∞–¥—à–∏–π —É—Å—Ç—Ä–æ–∏–ª –ø–æ—Ç–æ–ø –≤ –≤–∞–Ω–Ω–æ–π!¬ª",
        f"üè† –î–û–ú–ê–®–ù–ò–ô –•–ê–û–°\n\n{state.player_name}, –¥–æ–º–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —à—Ç–æ—Ä–º:\n¬´–£ –¥–µ—Ç–µ–π —Å—Ä–æ—á–Ω—ã–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω—É–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω, –∞ –º–ª–∞–¥—à–∏–π –ø–ª–∞—á–µ—Ç!¬ª"
    ]
    
    text = (
        f"üïí {time_to_str(state)}\n\n"
        f"{random.choice(family_situations)}\n\n"
        "–ö–∞–∫ —Å–ø–∞—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é?"
    )
    
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–º–æ—á—å –≤—Å–µ–º (1 —á–∞—Å 30 –º–∏–Ω—É—Ç)", callback_data="family_help")],
        [InlineKeyboardButton("‚è±Ô∏è –ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å (45 –º–∏–Ω—É—Ç)", callback_data="family_quick")],
        [InlineKeyboardButton("üí∞ –ù–∞–Ω—è—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ (20 –º–∏–Ω—É—Ç)", callback_data="family_money")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def scene_partner_dilemma(query, state):
    partner_messages = [
        f"‚ù§Ô∏è –û–¢–ù–û–®–ï–ù–ò–Ø\n\n–ü–∞—Ä—Ç–Ω—ë—Ä —Å–º–æ—Ç—Ä–∏—Ç —Å –Ω–∞–¥–µ–∂–¥–æ–π:\n¬´–°–µ–≥–æ–¥–Ω—è —é–±–∏–ª–µ–π —É –º–∞–º—ã. –û–Ω–∞ –∂–¥—ë—Ç, —á—Ç–æ –º—ã –∑–∞–µ–¥–µ–º. –ó–Ω–∞—é, —Ç—ã —É—Å—Ç–∞–ª, –Ω–æ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è...¬ª",
        f"üè° –°–ï–ú–ï–ô–ù–´–ï –¶–ï–ù–ù–û–°–¢–ò\n\n–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç:\n¬´–†–æ–¥–∏—Ç–µ–ª–∏ –∂–¥—É—Ç –Ω–∞—Å –Ω–∞ —É–∂–∏–Ω. –ú–æ–∂–µ—à—å –≤—ã–∫—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è? –≠—Ç–æ –º–Ω–æ–≥–æ–µ –¥–ª—è –º–µ–Ω—è –∑–Ω–∞—á–∏—Ç.¬ª"
    ]
    
    text = (
        f"üïí {time_to_str(state)}\n\n"
        f"{random.choice(partner_messages)}\n\n"
        "–¢–≤–æ–π –æ—Ç–≤–µ—Ç?"
    )
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü–æ–µ—Ö–∞—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º (1 —á–∞—Å 30 –º–∏–Ω—É—Ç)", callback_data="partner_help")],
        [InlineKeyboardButton("üíê –ò–∑–≤–∏–Ω–∏—Ç—å—Å—è –∏ –ø–æ–æ–±–µ—â–∞—Ç—å (30 –º–∏–Ω—É—Ç)", callback_data="partner_apologize")],
        [InlineKeyboardButton("‚ùå –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (10 –º–∏–Ω—É—Ç)", callback_data="partner_ignore")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def scene_transport(query, state):
    state.current_scene = "transport"
    text = (
        f"üïí {time_to_str(state)}\n\n"
        "üöó –§–ò–ù–ê–õ–¨–ù–´–ô –†–´–í–û–ö\n\n"
        "–í—ã–±–µ–≥–∞–µ—à—å –∏–∑ –¥–æ–º–∞. –ú–∞—à–∏–Ω–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è ‚Äî —Å–µ–ª –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä!\n\n"
        "–î–æ –ø–∞—Ä—ã –æ—Å—Ç–∞—ë—Ç—Å—è –≤—Å—ë –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏...\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîß –ü–æ—á–∏–Ω–∏—Ç—å –º–∞—à–∏–Ω—É (1 —á–∞—Å)", callback_data="transport_fix")],
        [InlineKeyboardButton("üöï –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ (25 –º–∏–Ω—É—Ç)", callback_data="transport_taxi")],
        [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å (50 –º–∏–Ω—É—Ç)", callback_data="transport_bus")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

# ========== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def show_statistics(query, state):
    state.total_score = calculate_total_score(state)
    
    text = (
        f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–Ø {state.day}\n\n"
        f"üíº –ö–∞—Ä—å–µ—Ä–∞: {state.career}/10 - {'–û—Ç–ª–∏—á–Ω–æ' if state.career >= 7 else '–•–æ—Ä–æ—à–æ' if state.career >= 4 else '–ü—Ä–æ–±–ª–µ–º—ã'}\n"
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: {state.family}/10 - {'–°—á–∞—Å—Ç–ª–∏–≤–∞' if state.family >= 7 else '–î–æ–≤–æ–ª—å–Ω–∞' if state.family >= 4 else '–û–±–∏–∂–µ–Ω–∞'}\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {state.energy}/10 - {'–ü–æ–ª–æ–Ω —Å–∏–ª' if state.energy >= 7 else '–ù–æ—Ä–º–∞–ª—å–Ω–æ' if state.energy >= 4 else '–£—Å—Ç–∞–ª'}\n"
        f"üîß –ù–∞–≤—ã–∫–∏: {state.skills}/10 - {'–ú–∞—Å—Ç–µ—Ä' if state.skills >= 7 else '–†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è' if state.skills >= 4 else '–ù–æ–≤–∏—á–æ–∫'}\n\n"
        
        f"‚≠ê –û–ë–©–ò–ô –°–ß–Å–¢: {state.total_score}\n"
        f"üìÖ –î–ù–ï–ô –ó–ê–í–ï–†–®–ï–ù–û: {state.days_completed}\n"
        f"üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–ô: {len(state.achievements)}\n\n"
        
        "–°—Ç—Ä–µ–º–∏—Å—å –∫ –±–∞–ª–∞–Ω—Å—É –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö! üéØ"
    )
    
    keyboard = [
        [InlineKeyboardButton("üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")],
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="share_progress")],
        [InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="next_day")],
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def show_achievements(query, state):
    text = "üèÜ –¢–í–û–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø\n\n"
    
    all_achievements = [
        {"name": "üéØ –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", "condition": "–ü–æ–ª—É—á–∏—Ç—å 5/5 —Ü–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å"},
        {"name": "‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∫–æ—Ä–¥", "condition": "–£—Å–ø–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –¥–æ 18:00"}, 
        {"name": "üíº –ö–∞—Ä—å–µ—Ä–∏—Å—Ç", "condition": "–ö–∞—Ä—å–µ—Ä–∞ 8+ –æ—á–∫–æ–≤"},
        {"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°—É–ø–µ—Ä—Ä–æ–¥–∏—Ç–µ–ª—å", "condition": "–°–µ–º—å—è 8+ –æ—á–∫–æ–≤"},
        {"name": "‚ù§Ô∏è –ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä", "condition": "–ù–µ –æ–±–∏–∂–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥"},
        {"name": "üîß –ú–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏", "condition": "–ù–∞–≤—ã–∫–∏ 8+ –æ—á–∫–æ–≤"},
        {"name": "üí° –ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä", "condition": "–û—Ç–∫—Ä—ã—Ç—å 3+ –ª–∞–π—Ñ—Ö–∞–∫–∞"},
        {"name": "ü§ù –ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥", "condition": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –¥—Ä—É–≥–∞"},
        {"name": "üï∞Ô∏è –¢–∞–π–º-–º–µ–Ω–µ–¥–∂–µ—Ä", "condition": "–ù–∏ —Ä–∞–∑—É –Ω–µ –æ–ø–æ–∑–¥–∞—Ç—å –∑–∞ 5 –¥–Ω–µ–π"},
        {"name": "‚ö° –≠–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä", "condition": "–≠–Ω–µ—Ä–≥–∏—è 8+ –æ—á–∫–æ–≤"},
        {"name": "üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç", "condition": "–í—Å–µ–≥–¥–∞ –Ω–∞–Ω–∏–º–∞—Ç—å –ø–æ–º–æ—â—å"},
        {"name": "üöÄ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —á–µ–º–ø–∏–æ–Ω", "condition": "–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ 8+ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"}
    ]
    
    unlocked_count = 0
    for achievement in all_achievements:
        achievement_name = achievement["name"].split(" ", 1)[1]
        if any(achievement_name in a for a in state.achievements):
            text += f"‚úÖ {achievement['name']}\n"
            unlocked_count += 1
        else:
            text += f"üîí {achievement['name']} - {achievement['condition']}\n"
    
    text += f"\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: {unlocked_count}/12 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="show_stats")],
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º", callback_data="share_progress")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text, reply_markup=reply_markup)

async def start_new_day(query, state):
    state.day += 1
    state.hours = 15
    state.minutes = 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º
    state.career = max(0, state.career - 1)
    state.family = max(0, state.family - 1)
    state.energy = min(10, state.energy + 2)
    state.skills = max(0, state.skills - 1)
    
    await start_day_message(query, state)

async def final_scene(query, state):
    # –§–ò–ù–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´
    state.days_completed += 1
    state.total_score = calculate_total_score(state)
    
    # –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–û–†–û–ì–ò
    time_score = not is_late(state)
    work_score = state.career >= 5  # 5+ –¥–ª—è —É—Å–ø–µ—Ö–∞ –ø–æ —Ä–∞–±–æ—Ç–µ
    family_score = state.family >= 5  # 5+ –¥–ª—è —É—Å–ø–µ—Ö–∞ –ø–æ —Å–µ–º—å–µ
    energy_score = state.energy >= 4  # 4+ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
    skills_score = state.skills >= 3  # 3+ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
    
    total_success = sum([time_score, work_score, family_score, energy_score, skills_score])
    
    # –¢–ï–ö–°–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    if is_late(state):
        text = f"üïí {time_to_str(state)} - ‚ùå –û–ü–û–ó–î–ê–õ –ù–ê –ü–ê–†–£!\n\n"
    else:
        text = f"üïí {time_to_str(state)} - ‚úÖ –£–°–ü–ï–õ –ù–ê –ü–ê–†–£!\n\n"
        if "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∫–æ—Ä–¥" not in state.achievements and state.hours <= 18:
            state.achievements.append("–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∫–æ—Ä–¥")
    
    text += "üìä –ò–¢–û–ì–ò –î–ù–Ø:\n\n"
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    results = [
        f"{'‚úÖ' if time_score else '‚ùå'} –í—Ä–µ–º—è: {'–£—Å–ø–µ–ª –Ω–∞ –ø–∞—Ä—É' if time_score else '–û–ø–æ–∑–¥–∞–ª'}",
        f"{'‚úÖ' if work_score else '‚ùå'} –†–∞–±–æ—Ç–∞: {'–ö–∞—Ä—å–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ' if work_score else '–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ'}",
        f"{'‚úÖ' if family_score else '‚ùå'} –°–µ–º—å—è: {'–°–µ–º—å—è —Å—á–∞—Å—Ç–ª–∏–≤–∞' if family_score else '–°–µ–º—å—è –æ–±–∏–∂–µ–Ω–∞'}", 
        f"{'‚úÖ' if energy_score else '‚ùå'} –≠–Ω–µ—Ä–≥–∏—è: {'–°–∏–ª—ã –µ—Å—Ç—å' if energy_score else '–ù—É–∂–µ–Ω –æ—Ç–¥—ã—Ö'}",
        f"{'‚úÖ' if skills_score else '‚ùå'} –ù–∞–≤—ã–∫–∏: {'–†–∞–∑–≤–∏–≤–∞–µ—à—å—Å—è' if skills_score else '–ú–æ–∂–Ω–æ –ª—É—á—à–µ'}"
    ]
    
    text += "\n".join(results) + "\n\n"
    
    # –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –§–†–ê–ó–´
    motivational_phrases = {
        5: "üèÜ LEGENDARY BALANCE!\n–¢—ã ‚Äî –±–æ–≥ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏! –≠—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–æ–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º!",
        4: "üî• –ü–û–ß–¢–ò –ò–î–ï–ê–õ!\n–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å! –î—Ä—É–∑—å—è –±—É–¥—É—Ç –∑–∞–≤–∏–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏–º –Ω–∞–≤—ã–∫–∞–º!",
        3: "üí™ –°–û–õ–ò–î–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!\n–¢—ã –¥–µ—Ä–∂–∏—à—å –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        2: "üìà –ï–°–¢–¨ –ö–£–î–ê –†–ê–°–¢–ò!\n–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —à–∞–Ω—Å!",
        1: "üå± –ù–ê–ß–ê–õ–û –ü–£–¢–ò!\n–ë–∞–ª–∞–Ω—Å ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ! –° –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è –ª—É—á—à–µ!",
        0: "üîÑ –£–ß–ï–ë–ù–´–ô –î–ï–ù–¨!\n–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —à–∞–Ω—Å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è!"
    }
    
    text += motivational_phrases.get(total_success, "üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    
    if total_success == 5:
        if "–ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å" not in state.achievements:
            state.achievements.append("–ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    
    text += f"\n\nüéØ –£—Å–ø–µ—à–Ω—ã—Ö —Ü–µ–ª–µ–π: {total_success}/5"
    text += f"\n‚≠ê –û–±—â–∏–π —Å—á—ë—Ç: {state.total_score}"
    text += f"\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(state.achievements)}/12"
    
    # –û–ë–ù–û–í–õ–Ø–ï–ú –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    achievement_map = [
        (state.career >= 8, "–ö–∞—Ä—å–µ—Ä–∏—Å—Ç"),
        (state.family >= 8, "–°—É–ø–µ—Ä—Ä–æ–¥–∏—Ç–µ–ª—å"),
        (state.energy >= 8, "–≠–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä"),
        (state.skills >= 8, "–ú–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏"),
        (all([state.career >= 8, state.family >= 8, state.energy >= 8, state.skills >= 8]), "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —á–µ–º–ø–∏–æ–Ω")
    ]
    
    for condition, achievement in achievement_map:
        if condition and achievement not in state.achievements:
            state.achievements.append(achievement)
    
    # –ö–ù–û–ü–ö–ê –®–ê–†–ò–ù–ì–ê
    reply_markup = await share_results_button(query, state)
    
    await query.message.reply_text(text, reply_markup=reply_markup)

# ========== –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–£–°–ê ==========
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç '–ì–æ–Ω–∫–∞ –¥–æ –£–Ω–∏–≤–µ—Ä–∞' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    print("üéÆ –ë–æ—Ç –ì–û–ù–ö–ê –î–û –£–ù–ò–í–ï–†–ê –∑–∞–ø—É—â–µ–Ω! –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üìç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /status")
    application.run_polling()

if __name__ == "__main__":
    main()